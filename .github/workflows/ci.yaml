name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  FLUTTER_VERSION: "3.29.0"
jobs:
  discover_projects:
    name: Discover Projects
    runs-on: ubuntu-latest
    outputs:
      project_dirs: ${{ steps.set-dirs.outputs.project_dirs }}
    steps:
      - uses: actions/checkout@v4

      - id: set-dirs
        name: Find project directories
        run: |
          # Create a temporary file to store project directories
          touch project_dirs.txt

          # Find Flutter projects and write to file - one per line
          find . -maxdepth 1 -type d -not -path "*/\.*" -not -path "./_initial" -not -path "." -exec test -f '{}/pubspec.yaml' \; -print > project_dirs.txt

          # Create a proper JSON array for GitHub Actions
          echo "project_dirs=$(cat project_dirs.txt | jq -R -s 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

          # Count projects found
          DIRS_COUNT=$(cat project_dirs.txt | grep -v '^$' | wc -l)

          # Print count and list to console
          echo "==== Found $DIRS_COUNT valid project directories ===="
          cat project_dirs.txt | while read -r dir; do
            if [ ! -z "$dir" ]; then
              echo "- $dir"
            fi
          done

          # Create step summary
          echo "# Project Directories Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total: $DIRS_COUNT**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat project_dirs.txt | while read -r dir; do
            if [ ! -z "$dir" ]; then
              echo "- \`$dir\`" >> $GITHUB_STEP_SUMMARY
            fi
          done

  lint:
    name: Lint and Format Check
    needs: discover_projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover_projects.outputs.project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Run lint and format check
        run: |
          make ci-lint-project PROJECT=${{ matrix.project }}

  unit_and_widget_tests:
    needs: [discover_projects, lint]
    name: Unit and Widget tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover_projects.outputs.project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Run tests
        run: |
          make ci-test-project PROJECT=${{ matrix.project }}

  build_web:
    needs: [discover_projects, lint, unit_and_widget_tests]
    name: Build Web
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover_projects.outputs.project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Build web
        run: |
          make ci-build-project PROJECT=${{ matrix.project }}
