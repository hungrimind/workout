name: Test Changes
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  FLUTTER_VERSION: "3.35.0"
jobs:
  detect_changes:
    name: Detect Changed Projects
    runs-on: ubuntu-latest
    outputs:
      all_project_dirs: ${{ steps.all-dirs.outputs.project_dirs }}
      changed_project_dirs: ${{ steps.changed-dirs.outputs.changed_projects }}
      has_changes: ${{ steps.changed-dirs.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This is important to get all history for comparison

      - id: all-dirs
        name: Find all project directories
        run: |
          # Create a temporary file to store project directories
          touch project_dirs.txt

          # Find Flutter projects and write to file - one per line
          echo "Finding Flutter/Dart projects (excluding _initial and hidden directories)..."
          find . -maxdepth 1 -type d -not -path "*/\.*" -not -path "./_initial" -not -path "." -exec test -f '{}/pubspec.yaml' \; -print | sed 's|^\./||' > project_dirs.txt

          # Format as a properly escaped JSON array for GitHub Actions
          echo "project_dirs<<EOF" >> $GITHUB_OUTPUT
          jq -R -s 'split("\n") | map(select(length > 0))' project_dirs.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Count projects found
          DIRS_COUNT=$(cat project_dirs.txt | grep -v '^$' | wc -l)

          # Print count and list to console
          echo "==== Found $DIRS_COUNT valid project directories ===="
          cat project_dirs.txt | while read -r dir; do
            if [ ! -z "$dir" ]; then
              echo "- $dir"
            fi
          done

          # Debug: List all top-level directories for reference
          echo "==== All top-level directories ===="
          find . -maxdepth 1 -type d -not -path "." | sort

      - id: changed-dirs
        name: Detect changed projects
        run: |
          # Get base commit to compare against
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          else
            # For push events, compare with the parent commit
            BASE_COMMIT=$(git rev-parse HEAD^)
          fi

          # Find all changed files
          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check for workflow changes that should trigger all projects
          WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep "^\.github/workflows/test-changes\.yaml$" || true)
          
          # Filter out files in ignored directories like _initial (but keep workflow changes for special handling)
          # Use grep -v with || true to prevent non-zero exit codes when there are no matches
          FILTERED_CHANGED_FILES=$(echo "$CHANGED_FILES" | { grep -v "^_initial/" || true; } | { grep -v "^\.github/" || true; })
          echo "Filtered changed files (excluding _initial and .github):"
          echo "$FILTERED_CHANGED_FILES"

          # If workflow file changed, test all projects regardless of other changes
          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "==== Workflow file changed - testing all projects ===="
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Use all projects as changed projects
            echo "changed_projects<<EOF" >> $GITHUB_OUTPUT
            jq -R -s 'split("\n") | map(select(length > 0))' project_dirs.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Create step summary for workflow changes
            echo "# All Projects Will Be Tested" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üîÑ Workflow configuration changed - testing all projects**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changed workflow file: \`.github/workflows/test-changes.yaml\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All projects will be tested:" >> $GITHUB_STEP_SUMMARY
            cat project_dirs.txt | while read -r dir; do
              if [ ! -z "$dir" ]; then
                echo "- \`$dir\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "==== DEBUG: All projects marked as changed due to workflow modification ===="
            exit 0
          fi

          # Check if there are any filtered changes at all
          if [ -z "$FILTERED_CHANGED_FILES" ]; then
            echo "No changes detected outside of ignored directories."
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "changed_projects=[]" >> $GITHUB_OUTPUT
            
            # Create step summary for no changes
            echo "# No Projects Changed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**‚úÖ Workflow completed successfully - no projects to process**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changes were detected only in ignored directories (_initial, .github) or non-project files." >> $GITHUB_STEP_SUMMARY
            
            # Add debug info
            echo "==== DEBUG: No changed files detected outside ignored directories ===="
            exit 0
          fi

          # Read all project directories
          ALL_PROJECTS=$(cat project_dirs.txt)

          # Print the projects for debugging
          echo "All projects (from file):"
          cat project_dirs.txt

          # Find which projects contain changed files
          CHANGED_PROJECTS=()
          echo "==== DEBUG: Checking projects for changes ===="

          # Use while loop with read to properly handle line breaks
          while read -r PROJECT || [ -n "$PROJECT" ]; do
            if [ -z "$PROJECT" ]; then continue; fi
            
            # Remove ./ prefix if present and trim whitespace
            CLEAN_PROJECT=$(echo "$PROJECT" | sed 's|^\./||' | xargs)
            echo "Checking project: '$CLEAN_PROJECT'"
            
            # Check if any changed files match this project path
            MATCHES=$(echo "$FILTERED_CHANGED_FILES" | grep "^$CLEAN_PROJECT/" || true)
            if [ -n "$MATCHES" ]; then
              echo "  ‚úÖ Found changes for $CLEAN_PROJECT"
              CHANGED_PROJECTS+=("$CLEAN_PROJECT")
            else
              echo "  ‚ùå No changes detected for $CLEAN_PROJECT"
              # Check individual files for debugging
              echo "  Looking for patterns like: ^$CLEAN_PROJECT/"
              echo "$FILTERED_CHANGED_FILES" | while read -r FILE; do
                if [[ "$FILE" == $CLEAN_PROJECT/* ]]; then
                  echo "    Should match: $FILE"
                fi
              done
            fi
          done < project_dirs.txt

          # Check if any projects have changed
          if [ ${#CHANGED_PROJECTS[@]} -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No projects have changes"
            # Use empty array but valid JSON
            echo "changed_projects=[]" >> $GITHUB_OUTPUT
            
            # Add debug info
            echo "==== DEBUG: No changed projects detected ===="
            echo "All detected projects:"
            cat project_dirs.txt
            echo "Filtered changed files:"
            echo "$FILTERED_CHANGED_FILES"
            
            # Create step summary for no changes
            echo "# No Projects Changed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**‚úÖ Workflow completed successfully - no projects to process**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changes were detected outside of ignored directories, but none affected any project directories." >> $GITHUB_STEP_SUMMARY
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Format as properly escaped JSON array using EOF delimiter
            echo "changed_projects<<EOF" >> $GITHUB_OUTPUT
            printf '%s\n' "${CHANGED_PROJECTS[@]}" | jq -R -s 'split("\n") | map(select(length > 0))' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Print changed projects
            echo "==== Found ${#CHANGED_PROJECTS[@]} changed projects ===="
            for PROJECT in "${CHANGED_PROJECTS[@]}"; do
              echo "- $PROJECT"
              # Show which files changed in this project
              echo "  Changed files:"
              echo "$FILTERED_CHANGED_FILES" | grep "^$PROJECT/" || true | sed 's/^/    /'
            done
            
            # Extra debug info to confirm the output is correctly formatted
            echo "==== DEBUG: GitHub Actions Output ===="
            echo "has_changes=true"
            echo "changed_projects:"
            printf '%s\n' "${CHANGED_PROJECTS[@]}" | jq -R -s 'split("\n") | map(select(length > 0))'
          fi

          # Create step summary
          echo "# Changed Projects" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Changed: ${#CHANGED_PROJECTS[@]}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for PROJECT in "${CHANGED_PROJECTS[@]}"; do
            echo "- \`$PROJECT\`" >> $GITHUB_STEP_SUMMARY
          done

  lint:
    name: Lint and Format Check
    needs: detect_changes
    runs-on: ubuntu-latest
    if: needs.detect_changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect_changes.outputs.changed_project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Run lint and format check
        run: |
          make ci-lint-project PROJECT=${{ matrix.project }}

  unit_and_widget_tests:
    needs: [detect_changes, lint]
    name: Unit and Widget tests
    runs-on: ubuntu-latest
    if: needs.detect_changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect_changes.outputs.changed_project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Run tests
        run: |
          make ci-test-project PROJECT=${{ matrix.project }}

  build_web:
    needs: [detect_changes, lint, unit_and_widget_tests]
    name: Build Web
    runs-on: ubuntu-latest
    if: needs.detect_changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect_changes.outputs.changed_project_dirs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Build web
        run: |
          make ci-build-project PROJECT=${{ matrix.project }}

  summarize_no_changes:
    needs: detect_changes
    name: No Changes Summary
    runs-on: ubuntu-latest
    if: needs.detect_changes.outputs.has_changes == 'false'
    steps:
      - name: Display success message
        run: |
          echo "‚úÖ Workflow completed successfully: No project changes detected outside of ignored directories."
          echo "All tests skipped as expected."
